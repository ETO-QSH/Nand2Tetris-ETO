import csv
import numpy as np


Dict = {
    "arrow": [
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '1', '-1', '1', '-1'],
        ['-1', '-1', '1', '-1', '1', '-1', '-1'],
        ['-1', '1', '-1', '1', '-1', '-1', '-1'],
        ['-1', '-1', '1', '-1', '1', '-1', '-1'],
        ['-1', '-1', '-1', '1', '-1', '1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1']],
    "block": [
        ['1', '1', '1', '1', '1', '1', '1'],
        ['1', '-1', '-1', '-1', '-1', '-1', '1'],
        ['1', '-1', '1', '1', '1', '-1', '1'],
        ['1', '-1', '1', '1', '1', '-1', '1'],
        ['1', '-1', '1', '1', '1', '-1', '1'],
        ['1', '-1', '-1', '-1', '-1', '-1', '1'],
        ['1', '1', '1', '1', '1', '1', '1']
    ],
    "diff": [
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '1', '-1', '-1', '-1'],
        ['-1', '-1', '1', '-1', '1', '-1', '-1'],
        ['-1', '1', '-1', '1', '-1', '1', '-1'],
        ['-1', '-1', '1', '-1', '1', '-1', '-1'],
        ['-1', '-1', '-1', '1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1']
    ],
    "pre": [
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '1', '1', '1', '1', '1', '-1'],
        ['-1', '1', '-1', '-1', '-1', '1', '-1'],
        ['-1', '1', '-1', '1', '-1', '1', '-1'],
        ['-1', '1', '-1', '-1', '-1', '1', '-1'],
        ['-1', '1', '1', '1', '1', '1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1']
    ],
    "cat": [
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1'],
        ['-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1'],
        ['-1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1'],
        ['-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1'],
        ['-1', '-1', '1', '-1', '-1', '1', '1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '-1', '-1', '1', '-1', '-1'],
        ['-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1'],
        ['-1', '-1', '-1', '1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1'],
        ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1', '-1']
    ]
}

with open("csv/variable.csv", mode='r', newline='') as file:
    reader = csv.reader(file)
    data = list(reader)

matrix = np.array(data)

sub_matrix_height = 7
sub_matrix_width = 7

step_row = 8
step_col = 6

keys = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ!?1234567890+-×÷"[::-1])

for i in range(1, matrix.shape[0] - sub_matrix_height + 1, step_row):
    for j in range(0, matrix.shape[1] - sub_matrix_width + 1, step_col):
        sub_matrix = matrix[i: i + sub_matrix_height, j: j + sub_matrix_width]
        key = keys.pop()
        if key not in '!?+-×÷':
            Dict[key] = sub_matrix.tolist()

result_dict = {}

for key, matrix in Dict.items():
    height = len(matrix)
    width = len(matrix[0])

    center_row = height // 2
    center_col = width // 2

    relative_coords = set()

    for row in range(height):
        for col in range(width):
            if matrix[row][col] == '1':
                relative_row = row - center_row - 1
                relative_col = col - center_col - 1
                relative_coords.add((relative_col, relative_row))

    result_dict[key] = relative_coords

print(result_dict)
